# Nombre de la aplicaci�n nombre vesrion final
spring.application.name=ProyectoFinalGS

# Configuraci�n del servidor
server.port=8080
spring.h2.console.enabled=true
#spring.h2.console.enabled=false

# Configuraci�n de la base de datos volatil
#spring.datasource.url=jdbc:h2:mem:test1
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa1
#spring.datasource.password=sa1

# tunelinforonda.ddns.net:3306

# Inicializaci�n SQL y configuraci�n de Hibernate volatil
#spring.sql.init.platform=h2
#spring.jpa.hibernate.ddl-auto=update

# Seguridad b�sica para pruebas volatil
#spring.security.usuario.name=add
#spring.security.usuario.password=1234
#spring.security.usuario.roles=ADMIN

# Nombre de la aplicaci�n y configuraci�n del servidor
#spring.application.name=turnify
#spring.application.name=ROOT
#server.port=8080
server.error.whitelabel.enabled=false
server.error.include-message=always
server.error.include-binding-errors=always

#Tomcat
#server.servlet.context-path=/

# Consola H2 para desarrollo (desactivada si usas MySQL)
#spring.h2.console.enabled=true

# Base de datos en AWS (usa variables de entorno en producci�n)
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.url=jdbc:postgresql://rdsturnify.ctouc2akatea.us-east-1.rds.amazonaws.com:5432/rdsturnify
spring.datasource.username=adminturnify
spring.datasource.password=admin123
spring.datasource.driver-class-name=org.postgresql.Driver

#Hibernate
# Indicamos que vamos a usar PostgreSQL como gestor de base de datos
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect
# Indicamos que Hibernate debe actualizar las tablas / columnas autom�ticamente cuando hagamos cambios en las entidades
# (por ejemplo, a�adir una nueva columna)
spring.jpa.hibernate.ddl-auto=update

# Logging de Spring
logging.level.org.springframework=DEBUG
logging.level.org.springframework.security=DEBUG

# Mostramos las sentencias SQL que Hibernate ejecuta en la consola
logging.level.org.hibernate.SQL=DEBUG

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false

# Configuraci�n de OAuth2 para autenticaci�n con Google
spring.security.oauth2.client.registration.google.client-id=813036393361-4e3ab0khvp709s26a9ug0nkv03708tqh.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
#spring.security.oauth2.client.registration.google.redirect-uri=https://turnify.duckdns.org//login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile,openid,https://www.googleapis.com/auth/calendar

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.client.provider.google.user-name-attribute=sub


# Configuraci�n del servidor de correo (gmail)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=turnify2025@gmail.com
spring.mail.password=${EMAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
